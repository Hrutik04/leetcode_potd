/*

Row with max 1s

You are given a 2D array consisting of only 1's and 0's, where each row is sorted in non-decreasing order. You need to find and return the index of the first row that has the most number of 1s. If no such row exists, return -1.
Note: 0-based indexing is followed.

Examples:

Input: arr[][] = [[0, 1, 1, 1],
               [0, 0, 1, 1],
               [1, 1, 1, 1],
               [0, 0, 0, 0]]
Output: 2
Explanation: Row 2 contains 4 1's.
Input: arr[][] = [[0, 0], 
               [1, 1]]
Output: 1
Explanation: Row 1 contains 2 1's.
Expected Time Complexity: O(n+m)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ number of rows, number of columns ≤ 103
0 ≤ arr[i][j] ≤ 1 

*/



class Solution {
  public:
    int rowWithMax1s(vector<vector<int> > &arr) {
        int maxonecount = -1;
        int j=arr[0].size()-1;
        for(int i = 0;i<arr.size();i++){
            while(j>=0 && arr[i][j] == 1){
                j--;
                maxonecount = i;
            }
        }
        return maxonecount;
    }
};