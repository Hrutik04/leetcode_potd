/*

409. Longest Palindrome

Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, "Aa" is not considered a palindrome.

Example 1:

Input: s = "abccccdd"
Output: 7
Explanation: One longest palindrome that can be built is "dccaccd", whose length is 7.

Example 2:

Input: s = "a"
Output: 1
Explanation: The longest palindrome that can be built is "a", whose length is 1.
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase and/or uppercase English letters only.

*/



class Solution {
public:
    int longestPalindrome(string s) {
       unordered_map<char, int> charCount;
        
        // Count the frequency of each character
        for (char c : s) {
            charCount[c]++;
        }
        
        int length = 0;
        bool hasOdd = false;
        
        for (auto& pair : charCount) {
            if (pair.second % 2 == 0) {
                length += pair.second;  // Add the even counts directly
            } else {
                length += pair.second - 1;  // Add the even part of the odd count
                hasOdd = true;  // Mark that we have an odd count
            }
        }
        
        // If there is any character with an odd count, we can use one of them as the center
        if (hasOdd) {
            length += 1;
        }
        
        return length;
    }
};
