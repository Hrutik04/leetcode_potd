/*

846. Hand of Straights

Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.

Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.

Example 1:

Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]

Example 2:

Input: hand = [1,2,3,4,5], groupSize = 4
Output: false
Explanation: Alice's hand can not be rearranged into groups of 4.

Constraints:

1 <= hand.length <= 104
0 <= hand[i] <= 109
1 <= groupSize <= hand.length

*/


class Solution {
public:
  bool isNStraightHand(vector<int>& hand, int groupSize) {
    if (hand.size() % groupSize != 0) {
      return false;
    }

    // Count the frequency of each card value
    unordered_map<int, int> cardCount;
    for (int card : hand) {
      cardCount[card]++;
    }

    // Sort the cards in ascending order
    sort(hand.begin(), hand.end());

    // Iterate through the sorted cards
    for (int card : hand) {
      // If the current card has 0 frequency, skip it (already processed)
      if (cardCount[card] == 0) {
        continue;
      }

      // Try to form a group starting from the current card
      for (int i = 0; i < groupSize; ++i) {
        int requiredCard = card + i;

        // Check if the required card exists with sufficient frequency
        if (cardCount.count(requiredCard) == 0 || cardCount[requiredCard] == 0) {
          return false;
        }

        // Decrement the frequency of the required card
        cardCount[requiredCard]--;
      }
    }

    // If all cards were processed successfully, return true
    return true;
    }
};
