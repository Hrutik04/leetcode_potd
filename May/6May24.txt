Question :

2487. Remove Nodes From Linked List

You are given the head of a linked list.
Remove every node which has a node with a greater value anywhere to the right side of it.
Return the head of the modified linked list.
 
Example 1:

Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.

Example 2:

Input: head = [1,1,1,1]
Output: [1,1,1,1]
Explanation: Every node has value 1, so no nodes are removed.
 
Constraints:

The number of the nodes in the given list is in the range [1, 105].
1 <= Node.val <= 105



Solution :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

     ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while (curr) {
            ListNode* nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    ListNode* removeNodes(ListNode* head) {
     if (!head || !head->next) return head; // If the list is empty or has only one node, return it
        
        head = reverseList(head); // Reverse the linked list
        
        ListNode* dummy = new ListNode(); // Dummy node to handle the case where the head node needs to be removed
        dummy->next = head;
        
        ListNode* curr = head;
        ListNode* prev = dummy;
        int maxVal = INT_MIN; // Initialize the maximum value seen so far
        
        // Find the maximum value and remove nodes with lesser values
        while (curr) {
            if (curr->val < maxVal) { // Remove the node if its value is less than maxVal
                prev->next = curr->next;
                ListNode* temp = curr;
                curr = curr->next;
                delete temp;
            } else {
                maxVal = curr->val; // Update maxVal
                prev = curr; // Update prev to the current node
                curr = curr->next; // Move to the next node
            }
        }
        
        ListNode* result = dummy->next; // Result is the list after dummy
        delete dummy; // Delete the dummy node
        
        // Reverse the modified list back
        return reverseList(result);
    }
};