Question :

140. Word Break II

Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

Example 1:

Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]

Example 2:

Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.

Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: []
 

Constraints:

1 <= s.length <= 20
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 10
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.
Input is generated in a way that the length of the answer doesn't exceed 105.



Solution :

class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
         unordered_set<string> wordSet(wordDict.begin(), wordDict.end());
        unordered_map<string, vector<string>> memo;
        return wordBreakHelper(s, wordSet, memo);
    }
    
private:
    vector<string> wordBreakHelper(const string& s, unordered_set<string>& wordSet, unordered_map<string, vector<string>>& memo) {
        if (memo.find(s) != memo.end()) {
            return memo[s];
        }
        
        vector<string> result;
        
        if (wordSet.find(s) != wordSet.end()) {
            result.push_back(s);
        }
        
        for (int i = 1; i < s.size(); ++i) {
            string prefix = s.substr(0, i);
            if (wordSet.find(prefix) != wordSet.end()) {
                string suffix = s.substr(i);
                vector<string> suffixWays = wordBreakHelper(suffix, wordSet, memo);
                for (const string& way : suffixWays) {
                    result.push_back(prefix + " " + way);
                }
            }
        }
        
        memo[s] = result;
        return result;
    }
};
