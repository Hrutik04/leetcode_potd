Question :

2816. Double a Number Represented as a Linked List

You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes.

Return the head of the linked list after doubling it.
 
Example 1:

Input: head = [1,8,9]
Output: [3,7,8]
Explanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378.

Example 2:

Input: head = [9,9,9]
Output: [1,9,9,8]
Explanation: The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. 
 
Constraints:

The number of nodes in the list is in the range [1, 104]
0 <= Node.val <= 9
The input is generated such that the list represents a number that does not have leading zeros, except the number 0 itself.



Solution :

Below code first reverses the linked list, then doubles its values while considering the carry, and finally reverses it back to its original order. If there's still a carry after doubling, it adds a new node at the beginning of the list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* doubleIt(ListNode* head) {
      // Reverse the linked list
        head = reverse(head);
        
        ListNode* curr = head;
        int carry = 0;

        // Traverse the reversed linked list
        while (curr) {
            // Double the current node value and add carry
            int newVal = curr->val * 2 + carry;
            // Update the current node value
            curr->val = newVal % 10;
            // Update carry for the next iteration
            carry = newVal / 10;

            // Move to the next node
            curr = curr->next;
        }
        
        // Reverse the linked list again to restore original order
        head = reverse(head);

        // If there's still a carry, create a new node
        if (carry > 0) {
            ListNode* newHead = new ListNode(carry);
            newHead->next = head;
            head = newHead;
        }

        return head;
    }

    // Function to reverse a linked list
    ListNode* reverse(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        
        while (curr) {
            ListNode* nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
        }
        
        return prev;
    }
};

