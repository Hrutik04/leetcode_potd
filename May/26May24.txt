Question :

552. Student Attendance Record II

An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:

'A': Absent.
'L': Late.
'P': Present.
Any student is eligible for an attendance award if they meet both of the following criteria:

The student was absent ('A') for strictly fewer than 2 days total.
The student was never late ('L') for 3 or more consecutive days.
Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.


Example 1:

Input: n = 2
Output: 8
Explanation: There are 8 records with length 2 that are eligible for an award:
"PP", "AP", "PA", "LP", "PL", "AL", "LA", "LL"
Only "AA" is not eligible because there are 2 absences (there need to be fewer than 2).

Example 2:

Input: n = 1
Output: 3
Example 3:

Input: n = 10101
Output: 183236316
 

Constraints:

1 <= n <= 105



Solution :

class Solution {
public:
    int checkRecord(int n) {
        const int MOD = 1000000007;
        
        // dp[i][j][k] means the number of valid sequences of length i with j 'A's and ending with k 'L's
        int dp[2][2][3] = {};
        dp[0][0][0] = 1;
        
        for (int i = 1; i <= n; ++i) {
            int cur = i % 2;
            int prev = (i - 1) % 2;
            memset(dp[cur], 0, sizeof(dp[cur]));
            
            for (int j = 0; j < 2; ++j) {
                for (int k = 0; k < 3; ++k) {
                    // If the current character is 'P'
                    dp[cur][j][0] = (dp[cur][j][0] + dp[prev][j][k]) % MOD;
                    // If the current character is 'L'
                    if (k < 2) {
                        dp[cur][j][k + 1] = (dp[cur][j][k + 1] + dp[prev][j][k]) % MOD;
                    }
                    // If the current character is 'A'
                    if (j < 1) {
                        dp[cur][j + 1][0] = (dp[cur][j + 1][0] + dp[prev][j][k]) % MOD;
                    }
                }
            }
        }
        
        int result = 0;
        for (int j = 0; j < 2; ++j) {
            for (int k = 0; k < 3; ++k) {
                result = (result + dp[n % 2][j][k]) % MOD;
            }
        }
        
        return result;
    }
};