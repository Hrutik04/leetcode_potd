Question :

786. K-th Smallest Prime Fraction

You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].

 
Example 1:

Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.

Example 2:

Input: arr = [1,7], k = 1
Output: [1,7]
 

Constraints:

2 <= arr.length <= 1000
1 <= arr[i] <= 3 * 104
arr[0] == 1
arr[i] is a prime number for i > 0.
All the numbers of arr are unique and sorted in strictly increasing order.
1 <= k <= arr.length * (arr.length - 1) / 2



Solution :

solution uses a priority queue to store pairs of indices representing fractions. 
We perform binary search using the priority queue. For k-1 times, we pop the top of the priority queue, and if the denominator index can be decremented further, we push the pair (i, j-1) back onto the priority queue.

class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
         int n = arr.size();
        auto comp = [&](pair<int, int>& a, pair<int, int>& b) {
            return arr[a.first] * arr[b.second] > arr[b.first] * arr[a.second];
        };
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> pq(comp);
        
        for (int i = 0; i < n - 1; ++i)
            pq.push({i, n - 1});
        
        for (int i = 0; i < k - 1; ++i) {
            auto top = pq.top();
            pq.pop();
            if (top.second - 1 > top.first)
                pq.push({top.first, top.second - 1});
        }
        
        auto top = pq.top();
        return {arr[top.first], arr[top.second]};
    }
};